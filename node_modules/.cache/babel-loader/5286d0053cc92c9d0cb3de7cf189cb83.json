{"ast":null,"code":"var _jsxFileName = \"/Users/jason/Workspace/annoyingPartyGuy/annoyingpartyguy/src/SentenceInput.jsx\";\nimport React, { Component } from 'react';\nexport class SentenceInput extends Component {\n  constructor(...args) {\n    super(...args);\n    this.url = \"https://words.bighugelabs.com/api/2/8caf40de2dbfa99fef564902c9e84f10/\";\n    this.state = {\n      sentence: \"\",\n      suggestionArray: []\n    };\n\n    this.handleFieldChange = evt => {\n      const stateToChange = {};\n      stateToChange[evt.target.id] = evt.target.value;\n      this.setState(stateToChange);\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault(); //Split the sentence into an array of words\n\n      let wordArray = this.state.sentence.split(\" \"); //For each word, return a URL into an array\n\n      let urlArray = wordArray.map(word => {\n        return this.url + word + \"/json\";\n      }); // console.log(\"URLArray : \", urlArray)\n\n      Promise.all(urlArray.map(single_url => fetch(single_url) // .then(r => r.text())\n      .then(r => r.json()))).then(texts => {\n        //get the part of speech key of the word at the index in the word array\n        // let key = Object.keys(texts[0])\n        let newWordArray = [\"Did\", \"you\", \"mean\", \"to\", \"say\"];\n\n        for (let i = 0; i < texts.length; i++) {\n          // console.log(\"Object Key : \", Object.keys(texts[i]))\n          let key = Object.keys(texts[0]);\n          key = key[0];\n          console.log(texts[i]); // newWordArray.push(texts[i][key].syn[0])\n          // console.log(texts[i][key].syn[0])\n        }\n\n        console.log(\"New Word Array \", newWordArray);\n        this.setState({\n          suggestionArray: newWordArray\n        });\n      }); //check the words to make sure theyre valid\n      // let fetchURL = this.url + this.state.sentence + \"/json\";\n      // await fetch(fetchURL).then(r => r.json()).then(r => console.log(r))\n    };\n  }\n\n  render() {\n    // console.log(this.state)\n    let suggestionString = this.state.suggestionArray.join(\" \");\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"sentenceInputForm\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"sentenceInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"What Did You Say?\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      required: true,\n      className: \"form-control\",\n      onChange: this.handleFieldChange,\n      id: \"sentence\",\n      placeholder: \"Enter phrase here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Enter\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, suggestionString));\n  }\n\n}\nexport default SentenceInput;","map":{"version":3,"sources":["/Users/jason/Workspace/annoyingPartyGuy/annoyingpartyguy/src/SentenceInput.jsx"],"names":["React","Component","SentenceInput","url","state","sentence","suggestionArray","handleFieldChange","evt","stateToChange","target","id","value","setState","handleSubmit","e","preventDefault","wordArray","split","urlArray","map","word","Promise","all","single_url","fetch","then","r","json","texts","newWordArray","i","length","key","Object","keys","console","log","render","suggestionString","join"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nexport class SentenceInput extends Component {\n\n    url = \"https://words.bighugelabs.com/api/2/8caf40de2dbfa99fef564902c9e84f10/\"\n\n\n\n    state = {\n        sentence: \"\",\n        suggestionArray : []\n    }\n\n    handleFieldChange = evt => {\n        const stateToChange = {};\n        stateToChange[evt.target.id] = evt.target.value;\n        this.setState(stateToChange);\n    };\n    handleSubmit = async (e) => {\n        e.preventDefault();\n        //Split the sentence into an array of words\n        let wordArray = this.state.sentence.split(\" \");\n        //For each word, return a URL into an array\n        let urlArray = wordArray.map(word => {\n            return this.url + word + \"/json\"\n        })\n        // console.log(\"URLArray : \", urlArray)\n        Promise.all(urlArray.map(single_url =>\n            fetch(single_url)\n                // .then(r => r.text())\n                .then(r => r.json())\n        )).then(texts => {\n            //get the part of speech key of the word at the index in the word array\n            // let key = Object.keys(texts[0])\n            let newWordArray = [\"Did\", \"you\", \"mean\", \"to\", \"say\"];\n            for (let i = 0; i < texts.length; i++) {\n                // console.log(\"Object Key : \", Object.keys(texts[i]))\n                let key = Object.keys(texts[0])\n                key = key[0]\n                console.log(texts[i])\n                // newWordArray.push(texts[i][key].syn[0])\n                // console.log(texts[i][key].syn[0])\n            }\n            console.log(\"New Word Array \",newWordArray)\n            this.setState({\n                suggestionArray : newWordArray\n            })\n\n        })\n        //check the words to make sure theyre valid\n\n\n\n        // let fetchURL = this.url + this.state.sentence + \"/json\";\n        // await fetch(fetchURL).then(r => r.json()).then(r => console.log(r))\n    };\n\n\n\n    render() {\n        // console.log(this.state)\n        let suggestionString = this.state.suggestionArray.join(\" \");\n\n\n        return (\n            <div>\n\n                <form className=\"sentenceInputForm\" onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"sentenceInput\">What Did You Say?</label>\n                        <div>\n                            <input\n                                type=\"text\"\n                                required\n                                className=\"form-control\"\n                                onChange={this.handleFieldChange}\n                                id=\"sentence\"\n                                placeholder=\"Enter phrase here\"\n                            />\n                        </div>\n                    </div>\n                    <button type=\"submit\">\n                        Enter\n                </button>\n                </form>\n                <p>{suggestionString}</p>\n            </div>\n        );\n    }\n}\n\nexport default SentenceInput;\n"]},"metadata":{},"sourceType":"module"}